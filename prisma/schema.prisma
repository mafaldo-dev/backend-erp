// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Employee {
  id          String      @id @default(uuid())
  name        String
  email       String      @unique
  password    String
  role        String
  salary      Float
  admissionDate DateTime
  phone       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now()) @updatedAt
}

model CustomerData {
  id          String         @id @default(uuid())
  name        String
  email       String         @unique
  phone       String?
  birthDate   DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @default(now()) @updatedAt

  addresses   CustomerAddress[]
  orders      Order[]
}

model CustomerAddress {
  id          String    @id @default(uuid())
  street      String
  city        String
  state       String
  zipCode     String
  customerId  String     // Alterado para String

  customer    CustomerData @relation(fields: [customerId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}

model Product {
  id          String      @id @default(uuid())
  name        String
  description String?
  price       Float
  image       String?
  stock       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  orderItems  OrderItem[]
}

model Order {
  id          String    @id @default(uuid())
  customerId  String
  totalAmount Float
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  customer    CustomerData @relation(fields: [customerId], references: [id])
  items       OrderItem[]
  payments    Payment[]
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  unitPrice Float

  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Payment {
  id        String   @id @default(uuid())
  orderId   String
  amount    Float
  status    String
  createdAt DateTime @default(now())

  order     Order    @relation(fields: [orderId], references: [id])
}
